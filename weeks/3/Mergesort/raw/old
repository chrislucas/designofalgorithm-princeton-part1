FastCollinearPoints
    public LineSegment [] segments() {
        int qPoints = arrayOfPoints.length;
        ResizingArrayBag<LineSegment> bagOfLineSegment = new ResizingArrayBag<>();
        /*
        int minIdx = 0;
        for(int i=1; i<qPoints; i++) {
            if(arrayOfPoints[i].compareTo(arrayOfPoints[minIdx]) < 0) {
                minIdx = i;
            }
        }
        // swap, menor elemento ve para frente do vetor
        if(minIdx != 0) {
            Point p = arrayOfPoints[minIdx];
            arrayOfPoints[minIdx] = arrayOfPoints[0];
            arrayOfPoints[0] = p;
        }
        // ordena o resto do vetor usando o coeficiente angular que os n-1 pontos formam com p0
        Arrays.sort(arrayOfPoints, 1, qPoints, arrayOfPoints[0].slopeOrder());
        */
        Arrays.sort(arrayOfPoints);
        Point [] copyArrayPoints = new Point[qPoints];
        System.arraycopy(arrayOfPoints, 0, copyArrayPoints, 0, qPoints);
        for(int i=0; i<qPoints; i++) {
            Point origin = copyArrayPoints[i];
            Arrays.sort(copyArrayPoints, origin.slopeOrder());
            double [] slopes = new double[qPoints];
            for (int j=0; j<qPoints; j++) {
                slopes[j] = origin.slopeTo(copyArrayPoints[j]);
            }
            int acc = 0;
            for(int j=1;j<qPoints-2;j++) {
                if(acc < 2) {
                    if(slopes[j] == slopes[j+1] && slopes[j] == slopes[j+2]) {
                        acc = 3;
                    }
                    else
                        acc = 0;
                }
                else {
                    if(slopes[j] == slopes[j+1] && slopes[j] == slopes[j+2]) {
                        acc++;
                    }
                    else
                        acc = 0;
                }
                if(acc >= 3) {
                    /*
                    if(setOfSegments.contains(slopes[j])) {
                        LineSegment s = setOfSegments.get(slopes[j]);
                    }
                    setOfSegments.put(slopes[j], new LineSegment(origin, copyArrayPoints[j+2]));
                    */
                    bagOfLineSegment.add(new LineSegment(origin, copyArrayPoints[j+2]));
                }
            }
        }
/*
        for (int i=1; i<qPoints-2; i++) {
            for(int j=i+1; j<qPoints-1; j++) {
                double slopePointPAndQ1 = arrayOfPoints[0].slopeTo(arrayOfPoints[i]);
                double slopePointPAndQ2 = arrayOfPoints[0].slopeTo(arrayOfPoints[j]);
                double slopePointPAndQ3 = arrayOfPoints[0].slopeTo(arrayOfPoints[j+1]);
                if(slopePointPAndQ1 == slopePointPAndQ2 && slopePointPAndQ1 == slopePointPAndQ3) {
                    bagOfLineSegment.add(new LineSegment(arrayOfPoints[0], arrayOfPoints[j+1]));
                }
            }
        }
*/
/*
        LineSegment [] segs = new LineSegment[setOfSegments.size()];
        Iterator<Double> keys = setOfSegments.keys().iterator();
        int m = 0;
        while (keys.hasNext())
            segs[m++] = setOfSegments.get(keys.next());
*/
        LineSegment [] segs1 = new LineSegment[bagOfLineSegment.size()];
        Iterator<LineSegment> keys1 = bagOfLineSegment.iterator();
        int m1 = 0;
        while (keys1.hasNext())
            segs1[m1++] = keys1.next();

        return segs1;
    }

                            //if(pair[1].compareTo(copyArrayPoints[j+2]) == 0) { }

                /*
                if(acc < 2) {
                    if(slopes[j] == slopes[j+1] && slopes[j] == slopes[j+2]) {
                        acc = 3;
                    }
                    else {
                        acc = 0;
                    }
                }
                else {
                    if(slopes[j] == slopes[j+1] && slopes[j] == slopes[j+2]) {
                        acc++;
                    }
                    else {
                        acc = 0;
                    }
                }
                */